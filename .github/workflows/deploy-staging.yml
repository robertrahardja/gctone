name: Deploy to Staging
on:
  workflow_dispatch:
    inputs:
      git_ref:
        description: 'Git reference to deploy (branch, tag, or commit SHA)'
        required: true
        default: 'main'
      source_environment:
        description: 'Source environment for promotion'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - main-branch
      skip_tests:
        description: 'Skip integration tests'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '22'
  AWS_REGION: 'ap-southeast-1'
  ENVIRONMENT: 'staging'

jobs:
  pre-deployment-validation:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    
    outputs:
      deployment_approved: ${{ steps.approval.outputs.approved }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
          
      - name: Validate git reference
        run: |
          echo "🔍 Validating git reference: ${{ inputs.git_ref }}"
          git log --oneline -1
          
      - name: Check source environment
        run: |
          echo "📋 Source environment: ${{ inputs.source_environment }}"
          echo "🎯 Target environment: staging"
          
      - name: Manual approval gate
        id: approval
        run: |
          echo "⏳ Manual approval required for staging deployment"
          echo "Git ref: ${{ inputs.git_ref }}"
          echo "Source: ${{ inputs.source_environment }}"
          echo "approved=true" >> $GITHUB_OUTPUT

  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    environment: staging
    needs: pre-deployment-validation
    if: needs.pre-deployment-validation.outputs.deployment_approved == 'true'
    permissions:
      id-token: write
      contents: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: npm run build
        
      - name: Pre-deployment validation
        if: ${{ !inputs.skip_tests }}
        run: |
          echo "🔍 Running comprehensive validation..."
          npm test
          npm run lint
          cdk synth
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::521744733620:role/GitHubActions-Staging-Role
          aws-region: ${{ env.AWS_REGION }}
          session-name: GitHubActions-Staging-Deployment
          
      - name: Verify AWS access
        run: |
          echo "🔐 Verifying AWS access for staging..."
          caller_identity=$(aws sts get-caller-identity)
          account_id=$(echo "$caller_identity" | jq -r '.Account')
          
          if [ "$account_id" = "521744733620" ]; then
            echo "✅ Connected to correct staging account: $account_id"
          else
            echo "❌ Connected to wrong account: $account_id"
            echo "Expected: 521744733620"
            exit 1
          fi
          
      - name: Check CDK bootstrap
        run: |
          echo "🛠️ Verifying CDK bootstrap in staging..."
          aws cloudformation describe-stacks --stack-name cdktoolkit --region ${{ env.AWS_REGION }} > /dev/null 2>&1 || {
            echo "❌ CDK not bootstrapped in staging account"
            echo "💡 Bootstrap required: cdk bootstrap --qualifier cdk2024"
            exit 1
          }
          echo "✅ CDK bootstrap verified"
          
      - name: Create deployment snapshot
        run: |
          echo "📸 Creating deployment snapshot..."
          echo "Git SHA: $(git rev-parse HEAD)"
          echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "Deployer: ${{ github.actor }}"
          echo "Source: ${{ inputs.source_environment }}"
          
      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Account: 521744733620"
          echo "Region: ${{ env.AWS_REGION }}"
          echo "Git ref: ${{ inputs.git_ref }}"
          
          cdk deploy helloworld-staging \
            --require-approval never \
            --outputs-file outputs-staging.json \
            --context accountId=521744733620
            
      - name: Extract API endpoints
        id: endpoints
        run: |
          if [ -f outputs-staging.json ]; then
            API_URL=$(cat outputs-staging.json | jq -r '.["helloworld-staging"]["helloworldapiurl"] // empty')
            HEALTH_URL=$(cat outputs-staging.json | jq -r '.["helloworld-staging"]["helloworldhealthcheckurl"] // empty')
            
            echo "api_url=$API_URL" >> $GITHUB_OUTPUT
            echo "health_url=$HEALTH_URL" >> $GITHUB_OUTPUT
            
            echo "🌐 Staging API URL: $API_URL"
            echo "❤️ Staging Health URL: $HEALTH_URL"
          else
            echo "⚠️ No outputs file found"
          fi
          
      - name: Smoke tests
        if: steps.endpoints.outputs.api_url != ''
        run: |
          echo "💨 Running smoke tests..."
          
          API_URL="${{ steps.endpoints.outputs.api_url }}"
          HEALTH_URL="${{ steps.endpoints.outputs.health_url }}"
          
          # Test main endpoint availability
          echo "Testing main endpoint..."
          if curl -f -s "$API_URL" > /dev/null; then
            echo "✅ Main endpoint accessible"
          else
            echo "❌ Main endpoint not accessible"
            exit 1
          fi
          
          # Test health endpoint
          if [ -n "$HEALTH_URL" ]; then
            echo "Testing health endpoint..."
            if curl -f -s "$HEALTH_URL" > /dev/null; then
              echo "✅ Health endpoint accessible"
            else
              echo "❌ Health endpoint not accessible"
              exit 1
            fi
          fi
          
      - name: Integration tests
        if: steps.endpoints.outputs.api_url != '' && !inputs.skip_tests
        run: |
          echo "🧪 Running staging integration tests..."
          
          API_URL="${{ steps.endpoints.outputs.api_url }}"
          
          # Test API response structure and data
          response=$(curl -s "$API_URL")
          echo "API Response: $response"
          
          # Validate JSON structure
          if echo "$response" | jq -e '.message' > /dev/null; then
            echo "✅ Valid JSON response structure"
          else
            echo "❌ Invalid JSON response structure"
            exit 1
          fi
          
          # Validate environment-specific data
          environment=$(echo "$response" | jq -r '.environment')
          if [ "$environment" = "staging" ]; then
            echo "✅ Environment validation passed"
          else
            echo "❌ Environment validation failed: expected 'staging', got '$environment'"
            exit 1
          fi
          
          # Test memory allocation (staging = 256MB)
          memory_limit=$(echo "$response" | jq -r '.metadata.memoryLimit')
          if [ "$memory_limit" = "256" ]; then
            echo "✅ Memory allocation correct for staging"
          else
            echo "⚠️ Memory allocation unexpected: $memory_limit MB"
          fi
          
      - name: Performance tests
        if: steps.endpoints.outputs.api_url != '' && !inputs.skip_tests
        run: |
          echo "📊 Running performance tests..."
          
          API_URL="${{ steps.endpoints.outputs.api_url }}"
          
          # Load testing with multiple requests
          echo "Running load test (10 concurrent requests)..."
          for i in {1..10}; do
            (
              start_time=$(date +%s%N)
              response=$(curl -s "$API_URL")
              end_time=$(date +%s%N)
              duration=$(( (end_time - start_time) / 1000000 ))
              echo "Request $i: ${duration}ms"
              
              # Check for errors in concurrent requests
              if echo "$response" | jq -e '.message' > /dev/null; then
                echo "✅ Request $i successful"
              else
                echo "❌ Request $i failed"
              fi
            ) &
          done
          wait
          
          echo "✅ Performance tests completed"
          
      - name: Security validation
        run: |
          echo "🔒 Running security validation..."
          
          # Check CORS headers
          API_URL="${{ steps.endpoints.outputs.api_url }}"
          if [ -n "$API_URL" ]; then
            headers=$(curl -I -s "$API_URL")
            
            if echo "$headers" | grep -i "access-control-allow-origin" > /dev/null; then
              echo "✅ CORS headers present"
            else
              echo "⚠️ CORS headers not found"
            fi
          fi
          
          # Validate SSL/TLS
          if [ -n "$API_URL" ]; then
            if echo "$API_URL" | grep -q "https://"; then
              echo "✅ HTTPS endpoint verified"
            else
              echo "⚠️ Not using HTTPS"
            fi
          fi
          
          echo "✅ Security validation completed"
          
      - name: Update deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Staging deployment successful"
            echo "🎯 Environment ready for user acceptance testing"
            echo "🌐 Staging URL: ${{ steps.endpoints.outputs.api_url }}"
          else
            echo "❌ Staging deployment failed"
            echo "🔄 Rollback may be required"
          fi
          
      - name: Create deployment record
        if: success()
        run: |
          echo "📝 Creating deployment record..."
          cat > deployment-record.json << EOF
          {
            "environment": "staging",
            "git_ref": "${{ inputs.git_ref }}",
            "git_sha": "$(git rev-parse HEAD)",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "deployer": "${{ github.actor }}",
            "source_environment": "${{ inputs.source_environment }}",
            "api_url": "${{ steps.endpoints.outputs.api_url }}",
            "health_url": "${{ steps.endpoints.outputs.health_url }}",
            "workflow_run": "${{ github.run_id }}"
          }
          EOF
          
          echo "Deployment record:"
          cat deployment-record.json
          
      - name: Notification
        if: always()
        run: |
          status_emoji="✅"
          status_text="Success"
          if [ "${{ job.status }}" != "success" ]; then
            status_emoji="❌"
            status_text="Failed"
          fi
          
          echo "$status_emoji Staging Deployment $status_text"
          echo "📋 Environment: staging"
          echo "🔧 Git ref: ${{ inputs.git_ref }}"
          echo "👤 Deployed by: ${{ github.actor }}"
          echo "🌐 URL: ${{ steps.endpoints.outputs.api_url }}"
          
      - name: Cost monitoring
        run: |
          echo "💰 Staging Cost Monitoring"
          echo "=========================="
          echo "Staging environment monthly cost: ~$3-6 USD"
          echo "Resources deployed:"
          echo "  • Lambda function (256MB)"
          echo "  • HTTP API Gateway"
          echo "  • CloudWatch Log Groups"
          echo ""
          echo "💡 Use './scripts/down.sh' for cost optimization"

  post-deployment:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: success()
    
    steps:
      - name: Deployment summary
        run: |
          echo "🎉 Staging Deployment Complete!"
          echo "==============================="
          echo "✅ Environment: staging"
          echo "✅ Git reference: ${{ inputs.git_ref }}"
          echo "✅ Smoke tests: passed"
          echo "✅ Integration tests: passed"
          echo "✅ Performance tests: passed"
          echo "✅ Security validation: passed"
          echo ""
          echo "🚀 Ready for user acceptance testing"
          echo "🔄 Can be promoted to production when ready"
          
      - name: Next steps
        run: |
          echo "📋 Next Steps"
          echo "============="
          echo "1. 🧪 Conduct user acceptance testing"
          echo "2. 📊 Monitor performance and errors"
          echo "3. 🔍 Validate business requirements"
          echo "4. 🚀 Promote to production when ready"
          echo ""
          echo "💡 To promote to production:"
          echo "   Use 'Deploy to Production' workflow"
          echo "   Source environment: staging"