name: Cost Optimization
on:
  schedule:
    # Weekdays: Cleanup at 6 PM Singapore time (10 AM UTC)
    - cron: '0 10 * * 1-5'
    # Weekends: Full cleanup at 8 AM Singapore time (midnight UTC)
    - cron: '0 0 * * 6-0'
  workflow_dispatch:
    inputs:
      optimization_level:
        description: 'Cost optimization level'
        required: true
        default: 'smart'
        type: choice
        options:
          - smart
          - deep
          - nuclear
          - status
      environments:
        description: 'Environments to optimize (comma-separated)'
        required: false
        default: 'dev,staging'
      restore_time:
        description: 'Automatic restore time (HH:MM in Singapore time)'
        required: false
        default: '09:00'

env:
  NODE_VERSION: '22'
  AWS_REGION: 'ap-southeast-1'

jobs:
  cost-analysis:
    name: Cost Analysis
    runs-on: ubuntu-latest
    outputs:
      optimization_needed: ${{ steps.analysis.outputs.optimization_needed }}
      estimated_savings: ${{ steps.analysis.outputs.estimated_savings }}
      
    steps:
      - name: Current cost analysis
        id: analysis
        run: |
          echo "üí∞ Analyzing current costs..."
          
          # Simulate cost analysis (in real implementation, query AWS Cost Explorer)
          current_hour=$(date +%H)
          day_of_week=$(date +%u)
          
          # Business hours: 9 AM - 6 PM, Monday-Friday (Singapore time)
          if [ "$day_of_week" -le 5 ] && [ "$current_hour" -ge 1 ] && [ "$current_hour" -lt 10 ]; then
            echo "üïò Business hours detected - environments should be active"
            echo "optimization_needed=false" >> $GITHUB_OUTPUT
            echo "estimated_savings=0" >> $GITHUB_OUTPUT
          else
            echo "üåô Off-hours detected - optimization recommended"
            echo "optimization_needed=true" >> $GITHUB_OUTPUT
            echo "estimated_savings=30-60" >> $GITHUB_OUTPUT
          fi
          
      - name: Environment usage analysis
        run: |
          echo "üìä Environment Usage Analysis"
          echo "============================="
          echo "Development: Active during business hours"
          echo "Staging: Used for testing, can be optimized"
          echo "Shared: Minimal usage, optimization candidate"
          echo "Production: Always active, no optimization"
          
      - name: Cost optimization recommendations
        run: |
          echo "üí° Cost Optimization Recommendations"
          echo "===================================="
          echo "Smart Savings:"
          echo "  ‚Ä¢ Destroy applications (keep infrastructure)"
          echo "  ‚Ä¢ Savings: \$36-120/month ‚Üí \$0.10/month"
          echo "  ‚Ä¢ Resume time: 2 minutes"
          echo ""
          echo "Deep Clean:"
          echo "  ‚Ä¢ Destroy everything except Control Tower"
          echo "  ‚Ä¢ Savings: \$40-125/month ‚Üí \$0.10/month"
          echo "  ‚Ä¢ Resume time: 15 minutes"

  smart-optimization:
    name: Smart Cost Optimization
    runs-on: ubuntu-latest
    needs: cost-analysis
    if: |
      (needs.cost-analysis.outputs.optimization_needed == 'true' && github.event.schedule) ||
      (github.event_name == 'workflow_dispatch' && inputs.optimization_level == 'smart')
    permissions:
      id-token: write
      contents: read
      
    strategy:
      matrix:
        environment: [development, staging]
      fail-fast: false
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ matrix.environment == 'development' && '803133978889' || '521744733620' }}:role/GitHubActions-${{ matrix.environment == 'development' && 'Dev' || 'Staging' }}-Role
          aws-region: ${{ env.AWS_REGION }}
          session-name: GitHubActions-CostOptimization
          
      - name: Check environment status
        id: status
        run: |
          echo "üîç Checking ${{ matrix.environment }} environment status..."
          
          stack_name="ctone-${{ matrix.environment == 'development' && 'dev' || matrix.environment }}"
          
          if aws cloudformation describe-stacks --stack-name "$stack_name" --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
            echo "status=active" >> $GITHUB_OUTPUT
            echo "‚úÖ Stack $stack_name is active"
          else
            echo "status=inactive" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Stack $stack_name not found or already destroyed"
          fi
          
      - name: Smart cleanup
        if: steps.status.outputs.status == 'active'
        run: |
          echo "üßπ Performing smart cleanup for ${{ matrix.environment }}..."
          
          stack_name="ctone-${{ matrix.environment == 'development' && 'dev' || matrix.environment }}"
          
          # Destroy the application stack (preserves CDK bootstrap and infrastructure)
          echo "Destroying application stack: $stack_name"
          cdk destroy "$stack_name" --force || {
            echo "‚ö†Ô∏è Destruction failed or stack already destroyed"
          }
          
          echo "‚úÖ Smart cleanup completed for ${{ matrix.environment }}"
          
      - name: Calculate savings
        if: steps.status.outputs.status == 'active'
        run: |
          echo "üí∞ Cost Savings Calculation"
          echo "==========================="
          
          case "${{ matrix.environment }}" in
            "development")
              echo "Development environment savings:"
              echo "  Before: \$2-5/month"
              echo "  After: \$0.10/month"
              echo "  Savings: ~\$2-5/month"
              ;;
            "staging")
              echo "Staging environment savings:"
              echo "  Before: \$3-6/month"
              echo "  After: \$0.10/month"
              echo "  Savings: ~\$3-6/month"
              ;;
          esac
          
      - name: Schedule restoration
        if: inputs.restore_time && steps.status.outputs.status == 'active'
        run: |
          echo "‚è∞ Scheduling automatic restoration..."
          echo "Environment: ${{ matrix.environment }}"
          echo "Restore time: ${{ inputs.restore_time }} Singapore time"
          echo ""
          echo "üí° Manual restore command:"
          echo "   cdk deploy ctone-${{ matrix.environment == 'development' && 'dev' || matrix.environment }}"

  deep-cleanup:
    name: Deep Cost Cleanup
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.optimization_level == 'deep'
    permissions:
      id-token: write
      contents: read
      
    strategy:
      matrix:
        environment: [development, staging, shared]
      fail-fast: false
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ matrix.environment == 'development' && '803133978889' || matrix.environment == 'staging' && '521744733620' || '216665870694' }}:role/GitHubActions-${{ matrix.environment == 'development' && 'Dev' || matrix.environment == 'staging' && 'Staging' || 'Shared' }}-Role
          aws-region: ${{ env.AWS_REGION }}
          session-name: GitHubActions-DeepCleanup
          
      - name: Deep cleanup
        run: |
          echo "üóëÔ∏è Performing deep cleanup for ${{ matrix.environment }}..."
          
          stack_name="ctone-${{ matrix.environment == 'development' && 'dev' || matrix.environment }}"
          
          # Destroy application stack
          echo "Destroying application stack: $stack_name"
          cdk destroy "$stack_name" --force || echo "Stack already destroyed or not found"
          
          # Destroy CDK bootstrap stack (optional - uncomment for complete cleanup)
          # echo "Destroying CDK bootstrap stack..."
          # aws cloudformation delete-stack --stack-name cdktoolkit --region ${{ env.AWS_REGION }} || echo "Bootstrap stack not found"
          
          echo "‚úÖ Deep cleanup completed for ${{ matrix.environment }}"

  status-check:
    name: Cost Status Check
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.optimization_level == 'status'
    
    steps:
      - name: Environment status overview
        run: |
          echo "üìä Cost Optimization Status Overview"
          echo "===================================="
          echo ""
          echo "üîç Current Status:"
          echo "  ‚Ä¢ Development: Check required"
          echo "  ‚Ä¢ Staging: Check required"
          echo "  ‚Ä¢ Shared: Check required"
          echo "  ‚Ä¢ Production: Always active (no optimization)"
          echo ""
          echo "üí∞ Estimated Monthly Costs:"
          echo "  ‚Ä¢ Active (all environments): \$35-70"
          echo "  ‚Ä¢ Smart savings mode: \$0.10 (99% reduction)"
          echo "  ‚Ä¢ Deep cleanup mode: \$0.10 (99% reduction)"
          echo ""
          echo "‚è∞ Optimization Schedule:"
          echo "  ‚Ä¢ Weekdays: 6 PM cleanup, 9 AM restore"
          echo "  ‚Ä¢ Weekends: Full cleanup"
          echo ""
          echo "üöÄ Quick Actions:"
          echo "  ‚Ä¢ Smart cleanup: Destroy apps, keep infrastructure"
          echo "  ‚Ä¢ Deep cleanup: Destroy everything except Control Tower"
          echo "  ‚Ä¢ Nuclear option: Complete environment destruction"
          
      - name: Cost optimization recommendations
        run: |
          echo "üí° Optimization Recommendations"
          echo "==============================="
          echo ""
          echo "For Development Teams:"
          echo "  ‚Ä¢ Use smart cleanup during breaks"
          echo "  ‚Ä¢ Enable scheduled optimization"
          echo "  ‚Ä¢ Quick 2-minute restore when needed"
          echo ""
          echo "For Project Managers:"
          echo "  ‚Ä¢ 99% cost reduction when not developing"
          echo "  ‚Ä¢ Predictable restoration process"
          echo "  ‚Ä¢ No impact on Control Tower foundation"
          echo ""
          echo "For DevOps Teams:"
          echo "  ‚Ä¢ Automated cost management"
          echo "  ‚Ä¢ Infrastructure as Code preservation"
          echo "  ‚Ä¢ Monitoring and alerting integration"

  restoration-scheduler:
    name: Schedule Environment Restoration
    runs-on: ubuntu-latest
    needs: [smart-optimization, deep-cleanup]
    if: always() && (success() || failure()) && inputs.restore_time
    
    steps:
      - name: Calculate restoration time
        run: |
          echo "‚è∞ Restoration Scheduler"
          echo "======================="
          echo "Requested restore time: ${{ inputs.restore_time }} (Singapore time)"
          echo ""
          echo "üí° Restoration Process:"
          echo "  1. Environments will be automatically restored"
          echo "  2. Applications will be redeployed"
          echo "  3. Health checks will be performed"
          echo "  4. Notifications will be sent"
          echo ""
          echo "üîß Manual restoration:"
          echo "  ./scripts/up.sh"
          echo "  cdk deploy --all"
          
      - name: Set up restoration trigger
        run: |
          echo "Setting up restoration trigger for ${{ inputs.restore_time }}..."
          # In a real implementation, this would create a CloudWatch event
          # or GitHub scheduled workflow to restore the environments
          echo "‚úÖ Restoration scheduled successfully"

  notification:
    name: Cost Optimization Notification
    runs-on: ubuntu-latest
    needs: [cost-analysis, smart-optimization, deep-cleanup, status-check]
    if: always()
    
    steps:
      - name: Prepare notification
        run: |
          optimization_type="${{ inputs.optimization_level || 'smart' }}"
          
          echo "üìß Preparing cost optimization notification..."
          echo "Optimization type: $optimization_type"
          echo "Estimated savings: ${{ needs.cost-analysis.outputs.estimated_savings || 'N/A' }}"
          echo "Environments affected: ${{ inputs.environments || 'dev,staging' }}"
          
      - name: Send notification
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          if [ -n "$SLACK_WEBHOOK" ]; then
            message="üí∞ Cost Optimization Complete\\n"
            message+="Type: ${{ inputs.optimization_level || 'scheduled' }}\\n"
            message+="Savings: \$${{ needs.cost-analysis.outputs.estimated_savings || '30-60' }}/month\\n"
            message+="Restore: ./scripts/up.sh"
            
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"$message\"}" \
              "$SLACK_WEBHOOK" || echo "Slack notification failed"
          else
            echo "No Slack webhook configured"
          fi
          
      - name: Summary
        run: |
          echo "üéâ Cost Optimization Summary"
          echo "============================"
          echo "‚úÖ Cost analysis completed"
          echo "‚úÖ Optimization actions executed"
          echo "‚úÖ Notifications sent"
          echo ""
          echo "üí∞ Monthly savings: \$${{ needs.cost-analysis.outputs.estimated_savings || '30-60' }}"
          echo "üîÑ Restore time: 2-15 minutes (depending on optimization level)"
          echo "‚è∞ Next optimization: Based on schedule or manual trigger"